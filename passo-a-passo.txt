Passo a passo: 

Geração do Backend: 
1 - Gerar o package.json -> Ir na pasta "backend" e rodar um: npm init -y

2 - Gerar as dependências de desenvolvimento -> 
npm i --save-dev body-parser@1.15.2 express@4.14.0 mongoose@4.7.0 node-restful@0.2.5 pm2@2.1.5 nodemon@1.11.0

3 - Ir para o editor de texto

4 - No arquivo texto, trocar: 
index.js -> src/loarder.js
scripts test ->     
"dev": "nodemon",
"production": "pm2 start src/loader.js --name todo-app"

5 - Criar a pasta src e dentro dela a pasta config.

6 - Dentro do src, criar o arquivo loader.js, como está no projeto

7 - Dentro do config, criar o server.js, como está no projeto.

8 - Dentro do config, criar o database.js, como está no projeto.

9 - Iniciar o mongo db -> No pasta backend, no console, digitar: mongod
(pro mongo funcionar, tem que existir na uma pasta c:\data\db)

10 - Criar dentro do src as pastas api/todo (nome do projeto) e dentro do todo um arquivo
chamado todo.js, que é onde ficarão os mapeamentos do objeto

11 - Criar dentro da mesma pasta (nesse caso api/todo) o arquivo de serviço todoService.js, que
é efetivamente a api do node.


Geração do Frontend:
1 - Gerar o package.json - npm init -y

2 - Instalar as dependências do projeto, começando pelo webpack
npm i --save-dev webpack@1.14.0 webpack-dev-server@1.16.2

3 - Instalar o Babel
npm i --save-dev babel-core@6.22.1 babel-loader@6.2.10 babel-plugin-react-html-attrs@2.0.0 babel-plugin-transform-object-rest-spread@6.22.0 babel-preset-es2015@6.22.0 babel-preset-react@6.22.0

4 - Dependências relativas a css, imagens, fontes, etc
npm i --save-dev extract-text-webpack-plugin@1.0.1 css-loader@0.26.1 style-loader@0.13.1 file-loader@0.9.0

5 - Dependências do bootstrap e do font awesome.
npm i --save-dev bootstrap@3.3.7 font-awesome@4.7.0

6 - Dependências relativas ao React.
npm i --save-dev react@15.4.2 react-dom@15.4.2 react-router@3.0.2 axios@0.15.3

7 - Abrir o editor e criar o .gitignore, contendo:
nome_modules
*.log